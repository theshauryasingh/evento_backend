"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerserWebpackPluginController = void 0;
const lodash_1 = require("lodash");
const defaultsSetters_1 = require("./defaultsSetters");
const terser_webpack_plugin_1 = __importDefault(require("./peers/terser-webpack-plugin"));
const terser_webpack_plugin_from_webpack_1 = __importDefault(require("./peers/terser-webpack-plugin-from-webpack"));
class TerserWebpackPluginController {
    apply(compiler) {
        var _a;
        this.findOrInitTerserWebpackPlugin(compiler.options);
        this.iniTest = (_a = this.terserWebpackPlugin) === null || _a === void 0 ? void 0 : _a.options.test;
    }
    findOrInitTerserWebpackPlugin(compilerOptions) {
        var _a;
        // Aligns to:
        // https://github.com/webpack/webpack/blob/4b4ca3bb53f36a5b8fc6bc1bd976ed7af161bd80/lib/config/defaults.js#L1160-L1174
        (0, defaultsSetters_1.A)(compilerOptions.optimization, 'minimizer', () => [
            new terser_webpack_plugin_from_webpack_1.default({
                terserOptions: {
                    compress: {
                        passes: 2,
                    },
                },
            }),
        ]);
        this.terserWebpackPlugin = (_a = compilerOptions.optimization.minimizer) === null || _a === void 0 ? void 0 : _a.find((p) => p instanceof terser_webpack_plugin_1.default ||
            p instanceof terser_webpack_plugin_from_webpack_1.default ||
            p.constructor.name === 'TerserPlugin');
    }
    setNamesToBeMinimized(names) {
        if (!this.terserWebpackPlugin)
            return;
        const newTest = this.iniTest ? (0, lodash_1.flatten)([this.iniTest]) : [];
        for (const name of names) {
            newTest.push(
            // Aligns to:
            // https://github.com/webpack/webpack/blob/4b4ca3bb53f36a5b8fc6bc1bd976ed7af161bd80/lib/ModuleFilenameHelpers.js#L73
            new RegExp(`^${name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')}$`, 'i'));
        }
        this.terserWebpackPlugin.options.test = newTest;
    }
}
exports.TerserWebpackPluginController = TerserWebpackPluginController;
//# sourceMappingURL=TerserWebpackPluginController.js.map