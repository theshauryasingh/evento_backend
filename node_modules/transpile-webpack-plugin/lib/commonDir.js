"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commonDirSync = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_os_1 = __importDefault(require("node:os"));
const node_path_1 = __importDefault(require("node:path"));
const constants_1 = require("./constants");
function longestCommonPrefix(strs) {
    if (!strs.length)
        return '';
    let k = strs[0].length;
    for (let i = 1, n = strs.length; i < n; i++) {
        k = Math.min(k, strs[i].length);
        for (let j = 0; j < k; j++)
            if (strs[i][j] !== strs[0][j]) {
                k = j;
                break;
            }
    }
    return strs[0].substring(0, k);
}
function isDir(p) {
    try {
        if (!node_fs_1.default.statSync(p).isDirectory())
            throw 0;
        return true;
    }
    catch (_a) {
        return false;
    }
}
function normalizePath(p, opts) {
    return opts.context ? node_path_1.default.resolve(opts.context, p) : node_path_1.default.normalize(p);
}
function commonDirSync(filePaths, opts = {}) {
    let prefix = longestCommonPrefix(filePaths.map((p) => normalizePath(p, opts)));
    if (!isDir(prefix)) {
        prefix = node_path_1.default.dirname(prefix);
        if (!isDir(prefix)) {
            throw new Error(`${constants_1.pluginName}${node_os_1.default.EOL}No valid common dir is figured out`);
        }
    }
    if (opts.longestCommonDir) {
        const finalLongestCommonDir = normalizePath(opts.longestCommonDir, opts);
        if (!isDir(finalLongestCommonDir)) {
            throw new Error(`${constants_1.pluginName}${node_os_1.default.EOL}The longestCommonDir '${opts.longestCommonDir}' doesn't exist`);
        }
        if (prefix.startsWith(finalLongestCommonDir)) {
            prefix = finalLongestCommonDir;
        }
    }
    return prefix;
}
exports.commonDirSync = commonDirSync;
//# sourceMappingURL=commonDir.js.map