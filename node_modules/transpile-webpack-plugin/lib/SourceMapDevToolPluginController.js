"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceMapDevToolPluginController = void 0;
const constants_1 = require("./constants");
const webpack_1 = require("./peers/webpack");
class SourceMapDevToolPluginController {
    apply(compiler) {
        compiler.hooks.environment.tap({ name: constants_1.pluginName, stage: constants_1.hookStageVeryEarly }, () => {
            if (compiler.options.devtool) {
                if (compiler.options.devtool.includes('source-map')) {
                    this.initSourceMapDevToolPlugin(compiler);
                    // Prevents devtool getting processed again inside webpack.
                    this.disableDevtool(compiler.options);
                }
            }
        });
        compiler.hooks.initialize.tap({ name: constants_1.pluginName, stage: constants_1.hookStageVeryEarly }, () => {
            // Restore devtool after compiler options get processed inside webpack.
            this.restoreDevtool(compiler.options);
        });
    }
    initSourceMapDevToolPlugin(compiler) {
        if (!compiler.options.devtool)
            return;
        // Aligns to:
        // https://github.com/webpack/webpack/blob/86a8bd9618c4677e94612ff7cbdf69affeba1268/lib/WebpackOptionsApply.js#L228-L247
        const hidden = compiler.options.devtool.includes('hidden');
        const inline = compiler.options.devtool.includes('inline');
        const evalWrapped = compiler.options.devtool.includes('eval');
        const cheap = compiler.options.devtool.includes('cheap');
        const moduleMaps = compiler.options.devtool.includes('module');
        const noSources = compiler.options.devtool.includes('nosources');
        const Plugin = evalWrapped ? webpack_1.EvalSourceMapDevToolPlugin : webpack_1.SourceMapDevToolPlugin;
        this.sourceMapDevToolPluginOptions = {
            filename: inline ? null : compiler.options.output.sourceMapFilename,
            moduleFilenameTemplate: compiler.options.output.devtoolModuleFilenameTemplate,
            fallbackModuleFilenameTemplate: compiler.options.output.devtoolFallbackModuleFilenameTemplate,
            append: hidden ? false : undefined,
            module: moduleMaps ? true : cheap ? false : true,
            columns: cheap ? false : true,
            noSources: noSources,
            namespace: compiler.options.output.devtoolNamespace,
        };
        new Plugin(this.sourceMapDevToolPluginOptions).apply(compiler);
    }
    disableDevtool(compilerOptions) {
        this.oldDevtool = compilerOptions.devtool;
        compilerOptions.devtool = false;
    }
    restoreDevtool(compilerOptions) {
        compilerOptions.devtool = this.oldDevtool;
    }
    setExtensionsToHaveSourceMaps(extensions) {
        if (this.sourceMapDevToolPluginOptions) {
            // Aligns to:
            // https://github.com/webpack/webpack/blob/6fa6e30254f0eb2673a3525739da1df0a5f51791/lib/SourceMapDevToolPlugin.js#L155
            const reEndsWithExts = new RegExp(`(${Array.from(extensions)
                .map((e) => `\\${e}`)
                .join('|')})$`, 'i');
            this.sourceMapDevToolPluginOptions.test = reEndsWithExts;
        }
    }
}
exports.SourceMapDevToolPluginController = SourceMapDevToolPluginController;
//# sourceMappingURL=SourceMapDevToolPluginController.js.map