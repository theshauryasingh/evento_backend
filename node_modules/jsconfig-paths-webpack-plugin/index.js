const path = require('path');

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function readConfigFile(configPath) {
  let config = null;
  try {
    config = require(configPath);
  } catch (err) {
    console.log(err);
    process.exit(1);
  }
  return config;
}

function getInnerRequest({ path: requestPath, request }, baseUrl) {
  const requestUrl = path.join(requestPath);  
  if (requestUrl.startsWith(baseUrl)) {
    return request;
  }
  return null;
}

function pathResolvePlugin(options = {}) {
  this.source = 'described-resolve';
  this.target = 'resolve';
  this.context = options.context ? path.resolve(options.context) : process.cwd();
  this.configFilePath = path.join(this.context, (options.configFileName || 'jsconfig.json'));
  this.config = readConfigFile(this.configFilePath);
  this.options = this.config.compilerOptions;
  this.absoluteBaseUrl = path.join(this.context, this.options.baseUrl);  
}

pathResolvePlugin.prototype.apply = function(compilator) {
  const { paths } = this.options;
  Object.keys(paths).forEach((alias) => {
    const pattern = `${escapeRegExp(alias).replace('\\*', '(.*)')}$`;
    paths[alias].forEach((target) => {
      compilator.plugin(this.source, this.createPlugin(compilator, pattern, target));
    });
  });
}

pathResolvePlugin.prototype.createPlugin = function(compilator, pattern, realPath) {
  const { target, absoluteBaseUrl } = this;
  return function(request, callback) {
    const innerRequestUrl = getInnerRequest(request, absoluteBaseUrl);
    if (!innerRequestUrl) return callback();
    const match = innerRequestUrl.match(pattern);
    if (!match) return callback();
    const newRequestUrl = path.join(absoluteBaseUrl, realPath.replace('*', match[1]));
    const newRequest = Object.assign({}, request, { request: newRequestUrl });    
    return compilator.doResolve(target, newRequest, `aliased "${innerRequestUrl}" to "${newRequestUrl}"`, function(err, result) {
      if (arguments.length > 0) return callback(err, result);
      return callback(null, null);
    });
  }
}

module.exports = pathResolvePlugin;